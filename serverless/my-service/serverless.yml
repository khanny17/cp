# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-service # NOTE: update this with your service name

plugins:
  - serverless-offline

custom:
  tableNames:
    user: 'users-table-${self:provider.stage}'
    plan: 'plans-table-${self:provider.stage}'
    preferences: 'preferences-table-${self:provider.stage}'
    templates: 'templates-table-${self:provider.stage}'

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["PlansDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [
            { "Fn::GetAtt": ["PlansDynamoDBTable", "Arn" ] }, "index", "plan_owner"
          ]]}
        - { "Fn::GetAtt": ["PreferencesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["TemplatesDynamoDBTable", "Arn" ] }

  environment:
    USERS_TABLE: ${self:custom.tableNames.user}
    PLANS_TABLE: ${self:custom.tableNames.plan}
    PREFERENCES_TABLE: ${self:custom.tableNames.preferences}
    TEMPLATES_TABLE: ${self:custom.tableNames.templates}
    JWT_SECRET: ${ssm:cp-jwt-secret}
    CAPTCHA_SECRET_KEY: ${ssm:cp-captcha-secret}

functions:
  auth:
    handler: handler.auth
    events:
      - http: ANY /auth
      - http: ANY /auth/{action}
  plans:
    handler: handler.plans
    events:
      - http: ANY /plans
      - http: ANY /plans/{action}
      - http: ANY /plans/{action}/{_id}
  preferences:
    handler: handler.preferences
    events:
      - http: ANY /preferences
      - http: ANY /preferences/{action}
  templates:
    handler: handler.templates
    events:
      - http: ANY /templates
      - http: ANY /templates/{action}
      - http: ANY /templates/{action}/{_id}

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNames.user}

    PlansDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: _id
            AttributeType: S
          -
            AttributeName: plan_owner
            AttributeType: S
        KeySchema:
          -
            AttributeName: _id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNames.plan}
        GlobalSecondaryIndexes:
        - IndexName: plan_owner
          KeySchema:
          - AttributeName: plan_owner
            KeyType: HASH
          Projection:
            NonKeyAttributes:
            - _id
            - details
            - lastAccessed
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'

    PreferencesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: user
            AttributeType: S
        KeySchema:
          -
            AttributeName: user
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNames.preferences}

    TemplatesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: _id
            AttributeType: S
        KeySchema:
          -
            AttributeName: _id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableNames.templates}
